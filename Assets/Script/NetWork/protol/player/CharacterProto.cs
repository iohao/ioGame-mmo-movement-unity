// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: characterProto.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Protocol.Character {

  /// <summary>Holder for reflection information generated from characterProto.proto</summary>
  public static partial class CharacterProtoReflection {

    #region Descriptor
    /// <summary>File descriptor for characterProto.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CharacterProtoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRjaGFyYWN0ZXJQcm90by5wcm90bxIScHJvdG9jb2wuY2hhcmFjdGVyItoI",
            "Cg5DaGFyYWN0ZXJQcm90bxITCgtjaGFyYWN0ZXJJZBgBIAEoCRIQCghwbGF5",
            "ZXJJZBgCIAEoCRINCgVtYXBJZBgDIAEoAxITCgtvcmllbnRhdGlvbhgEIAEo",
            "AhIQCghtYXBQb3N0WBgFIAEoAhIQCghtYXBQb3N0WRgGIAEoAhIQCghtYXBQ",
            "b3N0WhgHIAEoAhIWCg5jaGFyYWN0ZXJGaWVsZBgIIAEoAxIVCg1jaGFyYWN0",
            "ZXJOYW1lGAkgASgJEhsKE2NoYXJhY3Rlck9jY3VwYXRpb24YCiABKAkSFgoO",
            "Y2hhcmFjdGVyTGV2ZWwYCyABKAMSFAoMY2hhcmFjdGVyRXhwGAwgASgDEhgK",
            "EGNoYXJhY3RlckV4cE5leHQYDSABKAMSGAoQY2hhcmFjdGVyVGl0bGVJZBgO",
            "IAEoCRIWCg5jaGFyYWN0ZXJUaXRsZRgPIAEoCRIVCg1jaGFyYWN0ZXJSYWNl",
            "GBAgASgJEg8KB2d1aWxkSWQYESABKAkSEQoJZ3VpbGROYW1lGBIgASgJEgwK",
            "BGNvaW4YEyABKAMSEgoKbWFnaWNTdG9uZRgUIAEoAxIQCghzdHJlbmd0aBgV",
            "IAEoAxIPCgdhZ2lsaXR5GBYgASgDEhEKCWVuZHVyYW5jZRgXIAEoAxIQCghm",
            "bGV4aWJsZRgYIAEoAxIOCgZ3aXNkb20YGSABKAMSFAoMY29uc3RpdHV0aW9u",
            "GBogASgDEg0KBWNoYXJtGBsgASgDEgwKBGx1Y2sYHCABKAMSEAoIaGl0UG9p",
            "bnQYHSABKAMSEwoLaGl0UG9pbnRNYXgYHiABKAMSEgoKaHBSZWNvdmVyeRgf",
            "IAEoAxISCgptYWdpY1BvaW50GCAgASgDEhUKDW1hZ2ljUG9pbnRNYXgYISAB",
            "KAMSFQoNbWFnaWNSZWNvdmVyeRgiIAEoAxIOCgZhdHRhY2sYIyABKAMSEwoL",
            "YXR0YWNrU3BlZWQYJCABKAMSGQoRYXR0YWNrU3VjY2Vzc1JhdGUYJSABKAMS",
            "EwoLbWFnaWNBdHRhY2sYJiABKAMSGAoQbWFnaWNBdHRhY2tTcGVlZBgnIAEo",
            "AxIeChZtYWdpY0F0dGFja1N1Y2Nlc3NSYXRlGCggASgDEhYKDmNyaXRpY2Fs",
            "U3RyaWtlGCkgASgDEhsKE21hZ2ljQ3JpdGljYWxTdHJpa2UYKiABKAMSEAoI",
            "YWNjdXJhY3kYKyABKAMSFQoNbWFnaWNBY2N1cmFjeRgsIAEoAxINCgVkb2Rn",
            "ZRgtIAEoAxISCgptYWdpY0RvZGdlGC4gASgDEg8KB2RlZmVuc2UYLyABKAMS",
            "FAoMbGlnaHREZWZlbnNlGDAgASgDEhIKCmljZURlZmVuc2UYMSABKAMSEwoL",
            "ZmlyZURlZmVuc2UYMiABKAMSEgoKcmF5RGVmZW5zZRgzIAEoAxITCgt3aW5k",
            "RGVmZW5zZRg0IAEoAxITCgtkYXJrRGVmZW5zZRg1IAEoA2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.Character.CharacterProto), global::Protocol.Character.CharacterProto.Parser, new[]{ "CharacterId", "PlayerId", "MapId", "Orientation", "MapPostX", "MapPostY", "MapPostZ", "CharacterField", "CharacterName", "CharacterOccupation", "CharacterLevel", "CharacterExp", "CharacterExpNext", "CharacterTitleId", "CharacterTitle", "CharacterRace", "GuildId", "GuildName", "Coin", "MagicStone", "Strength", "Agility", "Endurance", "Flexible", "Wisdom", "Constitution", "Charm", "Luck", "HitPoint", "HitPointMax", "HpRecovery", "MagicPoint", "MagicPointMax", "MagicRecovery", "Attack", "AttackSpeed", "AttackSuccessRate", "MagicAttack", "MagicAttackSpeed", "MagicAttackSuccessRate", "CriticalStrike", "MagicCriticalStrike", "Accuracy", "MagicAccuracy", "Dodge", "MagicDodge", "Defense", "LightDefense", "IceDefense", "FireDefense", "RayDefense", "WindDefense", "DarkDefense" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// 玩家角色对象 player_character
  /// </summary>
  public sealed partial class CharacterProto : pb::IMessage<CharacterProto>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CharacterProto> _parser = new pb::MessageParser<CharacterProto>(() => new CharacterProto());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CharacterProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.Character.CharacterProtoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CharacterProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CharacterProto(CharacterProto other) : this() {
      characterId_ = other.characterId_;
      playerId_ = other.playerId_;
      mapId_ = other.mapId_;
      orientation_ = other.orientation_;
      mapPostX_ = other.mapPostX_;
      mapPostY_ = other.mapPostY_;
      mapPostZ_ = other.mapPostZ_;
      characterField_ = other.characterField_;
      characterName_ = other.characterName_;
      characterOccupation_ = other.characterOccupation_;
      characterLevel_ = other.characterLevel_;
      characterExp_ = other.characterExp_;
      characterExpNext_ = other.characterExpNext_;
      characterTitleId_ = other.characterTitleId_;
      characterTitle_ = other.characterTitle_;
      characterRace_ = other.characterRace_;
      guildId_ = other.guildId_;
      guildName_ = other.guildName_;
      coin_ = other.coin_;
      magicStone_ = other.magicStone_;
      strength_ = other.strength_;
      agility_ = other.agility_;
      endurance_ = other.endurance_;
      flexible_ = other.flexible_;
      wisdom_ = other.wisdom_;
      constitution_ = other.constitution_;
      charm_ = other.charm_;
      luck_ = other.luck_;
      hitPoint_ = other.hitPoint_;
      hitPointMax_ = other.hitPointMax_;
      hpRecovery_ = other.hpRecovery_;
      magicPoint_ = other.magicPoint_;
      magicPointMax_ = other.magicPointMax_;
      magicRecovery_ = other.magicRecovery_;
      attack_ = other.attack_;
      attackSpeed_ = other.attackSpeed_;
      attackSuccessRate_ = other.attackSuccessRate_;
      magicAttack_ = other.magicAttack_;
      magicAttackSpeed_ = other.magicAttackSpeed_;
      magicAttackSuccessRate_ = other.magicAttackSuccessRate_;
      criticalStrike_ = other.criticalStrike_;
      magicCriticalStrike_ = other.magicCriticalStrike_;
      accuracy_ = other.accuracy_;
      magicAccuracy_ = other.magicAccuracy_;
      dodge_ = other.dodge_;
      magicDodge_ = other.magicDodge_;
      defense_ = other.defense_;
      lightDefense_ = other.lightDefense_;
      iceDefense_ = other.iceDefense_;
      fireDefense_ = other.fireDefense_;
      rayDefense_ = other.rayDefense_;
      windDefense_ = other.windDefense_;
      darkDefense_ = other.darkDefense_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CharacterProto Clone() {
      return new CharacterProto(this);
    }

    /// <summary>Field number for the "characterId" field.</summary>
    public const int CharacterIdFieldNumber = 1;
    private string characterId_ = "";
    /// <summary>
    /// 角色id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CharacterId {
      get { return characterId_; }
      set {
        characterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 2;
    private string playerId_ = "";
    /// <summary>
    /// 玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PlayerId {
      get { return playerId_; }
      set {
        playerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mapId" field.</summary>
    public const int MapIdFieldNumber = 3;
    private long mapId_;
    /// <summary>
    /// 地图id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long MapId {
      get { return mapId_; }
      set {
        mapId_ = value;
      }
    }

    /// <summary>Field number for the "orientation" field.</summary>
    public const int OrientationFieldNumber = 4;
    private float orientation_;
    /// <summary>
    /// 朝向
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Orientation {
      get { return orientation_; }
      set {
        orientation_ = value;
      }
    }

    /// <summary>Field number for the "mapPostX" field.</summary>
    public const int MapPostXFieldNumber = 5;
    private float mapPostX_;
    /// <summary>
    /// 地图坐标x
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MapPostX {
      get { return mapPostX_; }
      set {
        mapPostX_ = value;
      }
    }

    /// <summary>Field number for the "mapPostY" field.</summary>
    public const int MapPostYFieldNumber = 6;
    private float mapPostY_;
    /// <summary>
    /// 地图坐标y
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MapPostY {
      get { return mapPostY_; }
      set {
        mapPostY_ = value;
      }
    }

    /// <summary>Field number for the "mapPostZ" field.</summary>
    public const int MapPostZFieldNumber = 7;
    private float mapPostZ_;
    /// <summary>
    /// 地图坐标z
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MapPostZ {
      get { return mapPostZ_; }
      set {
        mapPostZ_ = value;
      }
    }

    /// <summary>Field number for the "characterField" field.</summary>
    public const int CharacterFieldFieldNumber = 8;
    private long characterField_;
    /// <summary>
    /// 角色栏位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long CharacterField {
      get { return characterField_; }
      set {
        characterField_ = value;
      }
    }

    /// <summary>Field number for the "characterName" field.</summary>
    public const int CharacterNameFieldNumber = 9;
    private string characterName_ = "";
    /// <summary>
    /// 角色名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CharacterName {
      get { return characterName_; }
      set {
        characterName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "characterOccupation" field.</summary>
    public const int CharacterOccupationFieldNumber = 10;
    private string characterOccupation_ = "";
    /// <summary>
    /// 角色职业
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CharacterOccupation {
      get { return characterOccupation_; }
      set {
        characterOccupation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "characterLevel" field.</summary>
    public const int CharacterLevelFieldNumber = 11;
    private long characterLevel_;
    /// <summary>
    /// 角色等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long CharacterLevel {
      get { return characterLevel_; }
      set {
        characterLevel_ = value;
      }
    }

    /// <summary>Field number for the "characterExp" field.</summary>
    public const int CharacterExpFieldNumber = 12;
    private long characterExp_;
    /// <summary>
    /// 角色当前经验值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long CharacterExp {
      get { return characterExp_; }
      set {
        characterExp_ = value;
      }
    }

    /// <summary>Field number for the "characterExpNext" field.</summary>
    public const int CharacterExpNextFieldNumber = 13;
    private long characterExpNext_;
    /// <summary>
    /// 下一级经验值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long CharacterExpNext {
      get { return characterExpNext_; }
      set {
        characterExpNext_ = value;
      }
    }

    /// <summary>Field number for the "characterTitleId" field.</summary>
    public const int CharacterTitleIdFieldNumber = 14;
    private string characterTitleId_ = "";
    /// <summary>
    /// 称号id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CharacterTitleId {
      get { return characterTitleId_; }
      set {
        characterTitleId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "characterTitle" field.</summary>
    public const int CharacterTitleFieldNumber = 15;
    private string characterTitle_ = "";
    /// <summary>
    /// 称号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CharacterTitle {
      get { return characterTitle_; }
      set {
        characterTitle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "characterRace" field.</summary>
    public const int CharacterRaceFieldNumber = 16;
    private string characterRace_ = "";
    /// <summary>
    /// 种族
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CharacterRace {
      get { return characterRace_; }
      set {
        characterRace_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "guildId" field.</summary>
    public const int GuildIdFieldNumber = 17;
    private string guildId_ = "";
    /// <summary>
    /// 行会id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string GuildId {
      get { return guildId_; }
      set {
        guildId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "guildName" field.</summary>
    public const int GuildNameFieldNumber = 18;
    private string guildName_ = "";
    /// <summary>
    /// 行会名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string GuildName {
      get { return guildName_; }
      set {
        guildName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "coin" field.</summary>
    public const int CoinFieldNumber = 19;
    private long coin_;
    /// <summary>
    /// 金币数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Coin {
      get { return coin_; }
      set {
        coin_ = value;
      }
    }

    /// <summary>Field number for the "magicStone" field.</summary>
    public const int MagicStoneFieldNumber = 20;
    private long magicStone_;
    /// <summary>
    /// 灵石数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long MagicStone {
      get { return magicStone_; }
      set {
        magicStone_ = value;
      }
    }

    /// <summary>Field number for the "strength" field.</summary>
    public const int StrengthFieldNumber = 21;
    private long strength_;
    /// <summary>
    /// 力量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Strength {
      get { return strength_; }
      set {
        strength_ = value;
      }
    }

    /// <summary>Field number for the "agility" field.</summary>
    public const int AgilityFieldNumber = 22;
    private long agility_;
    /// <summary>
    /// 敏捷
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Agility {
      get { return agility_; }
      set {
        agility_ = value;
      }
    }

    /// <summary>Field number for the "endurance" field.</summary>
    public const int EnduranceFieldNumber = 23;
    private long endurance_;
    /// <summary>
    /// 耐力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Endurance {
      get { return endurance_; }
      set {
        endurance_ = value;
      }
    }

    /// <summary>Field number for the "flexible" field.</summary>
    public const int FlexibleFieldNumber = 24;
    private long flexible_;
    /// <summary>
    /// 灵活
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Flexible {
      get { return flexible_; }
      set {
        flexible_ = value;
      }
    }

    /// <summary>Field number for the "wisdom" field.</summary>
    public const int WisdomFieldNumber = 25;
    private long wisdom_;
    /// <summary>
    /// 智慧
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Wisdom {
      get { return wisdom_; }
      set {
        wisdom_ = value;
      }
    }

    /// <summary>Field number for the "constitution" field.</summary>
    public const int ConstitutionFieldNumber = 26;
    private long constitution_;
    /// <summary>
    /// 体质
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Constitution {
      get { return constitution_; }
      set {
        constitution_ = value;
      }
    }

    /// <summary>Field number for the "charm" field.</summary>
    public const int CharmFieldNumber = 27;
    private long charm_;
    /// <summary>
    /// 魅力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Charm {
      get { return charm_; }
      set {
        charm_ = value;
      }
    }

    /// <summary>Field number for the "luck" field.</summary>
    public const int LuckFieldNumber = 28;
    private long luck_;
    /// <summary>
    /// 运气
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Luck {
      get { return luck_; }
      set {
        luck_ = value;
      }
    }

    /// <summary>Field number for the "hitPoint" field.</summary>
    public const int HitPointFieldNumber = 29;
    private long hitPoint_;
    /// <summary>
    /// 生命值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long HitPoint {
      get { return hitPoint_; }
      set {
        hitPoint_ = value;
      }
    }

    /// <summary>Field number for the "hitPointMax" field.</summary>
    public const int HitPointMaxFieldNumber = 30;
    private long hitPointMax_;
    /// <summary>
    /// 最大生命值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long HitPointMax {
      get { return hitPointMax_; }
      set {
        hitPointMax_ = value;
      }
    }

    /// <summary>Field number for the "hpRecovery" field.</summary>
    public const int HpRecoveryFieldNumber = 31;
    private long hpRecovery_;
    /// <summary>
    /// 生命值回复速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long HpRecovery {
      get { return hpRecovery_; }
      set {
        hpRecovery_ = value;
      }
    }

    /// <summary>Field number for the "magicPoint" field.</summary>
    public const int MagicPointFieldNumber = 32;
    private long magicPoint_;
    /// <summary>
    /// 法力值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long MagicPoint {
      get { return magicPoint_; }
      set {
        magicPoint_ = value;
      }
    }

    /// <summary>Field number for the "magicPointMax" field.</summary>
    public const int MagicPointMaxFieldNumber = 33;
    private long magicPointMax_;
    /// <summary>
    /// 最大法力值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long MagicPointMax {
      get { return magicPointMax_; }
      set {
        magicPointMax_ = value;
      }
    }

    /// <summary>Field number for the "magicRecovery" field.</summary>
    public const int MagicRecoveryFieldNumber = 34;
    private long magicRecovery_;
    /// <summary>
    /// 法力回复速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long MagicRecovery {
      get { return magicRecovery_; }
      set {
        magicRecovery_ = value;
      }
    }

    /// <summary>Field number for the "attack" field.</summary>
    public const int AttackFieldNumber = 35;
    private long attack_;
    /// <summary>
    /// 攻击力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Attack {
      get { return attack_; }
      set {
        attack_ = value;
      }
    }

    /// <summary>Field number for the "attackSpeed" field.</summary>
    public const int AttackSpeedFieldNumber = 36;
    private long attackSpeed_;
    /// <summary>
    /// 攻击速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long AttackSpeed {
      get { return attackSpeed_; }
      set {
        attackSpeed_ = value;
      }
    }

    /// <summary>Field number for the "attackSuccessRate" field.</summary>
    public const int AttackSuccessRateFieldNumber = 37;
    private long attackSuccessRate_;
    /// <summary>
    /// 攻击成功率
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long AttackSuccessRate {
      get { return attackSuccessRate_; }
      set {
        attackSuccessRate_ = value;
      }
    }

    /// <summary>Field number for the "magicAttack" field.</summary>
    public const int MagicAttackFieldNumber = 38;
    private long magicAttack_;
    /// <summary>
    /// 魔法攻击力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long MagicAttack {
      get { return magicAttack_; }
      set {
        magicAttack_ = value;
      }
    }

    /// <summary>Field number for the "magicAttackSpeed" field.</summary>
    public const int MagicAttackSpeedFieldNumber = 39;
    private long magicAttackSpeed_;
    /// <summary>
    /// 施法速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long MagicAttackSpeed {
      get { return magicAttackSpeed_; }
      set {
        magicAttackSpeed_ = value;
      }
    }

    /// <summary>Field number for the "magicAttackSuccessRate" field.</summary>
    public const int MagicAttackSuccessRateFieldNumber = 40;
    private long magicAttackSuccessRate_;
    /// <summary>
    /// 魔法成功率
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long MagicAttackSuccessRate {
      get { return magicAttackSuccessRate_; }
      set {
        magicAttackSuccessRate_ = value;
      }
    }

    /// <summary>Field number for the "criticalStrike" field.</summary>
    public const int CriticalStrikeFieldNumber = 41;
    private long criticalStrike_;
    /// <summary>
    /// 暴击率
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long CriticalStrike {
      get { return criticalStrike_; }
      set {
        criticalStrike_ = value;
      }
    }

    /// <summary>Field number for the "magicCriticalStrike" field.</summary>
    public const int MagicCriticalStrikeFieldNumber = 42;
    private long magicCriticalStrike_;
    /// <summary>
    /// 魔法暴击率
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long MagicCriticalStrike {
      get { return magicCriticalStrike_; }
      set {
        magicCriticalStrike_ = value;
      }
    }

    /// <summary>Field number for the "accuracy" field.</summary>
    public const int AccuracyFieldNumber = 43;
    private long accuracy_;
    /// <summary>
    /// 命中率
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Accuracy {
      get { return accuracy_; }
      set {
        accuracy_ = value;
      }
    }

    /// <summary>Field number for the "magicAccuracy" field.</summary>
    public const int MagicAccuracyFieldNumber = 44;
    private long magicAccuracy_;
    /// <summary>
    /// 魔法命中率
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long MagicAccuracy {
      get { return magicAccuracy_; }
      set {
        magicAccuracy_ = value;
      }
    }

    /// <summary>Field number for the "dodge" field.</summary>
    public const int DodgeFieldNumber = 45;
    private long dodge_;
    /// <summary>
    /// 回避率
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Dodge {
      get { return dodge_; }
      set {
        dodge_ = value;
      }
    }

    /// <summary>Field number for the "magicDodge" field.</summary>
    public const int MagicDodgeFieldNumber = 46;
    private long magicDodge_;
    /// <summary>
    /// 魔法回避率
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long MagicDodge {
      get { return magicDodge_; }
      set {
        magicDodge_ = value;
      }
    }

    /// <summary>Field number for the "defense" field.</summary>
    public const int DefenseFieldNumber = 47;
    private long defense_;
    /// <summary>
    /// 防御力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Defense {
      get { return defense_; }
      set {
        defense_ = value;
      }
    }

    /// <summary>Field number for the "lightDefense" field.</summary>
    public const int LightDefenseFieldNumber = 48;
    private long lightDefense_;
    /// <summary>
    /// 光抗
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long LightDefense {
      get { return lightDefense_; }
      set {
        lightDefense_ = value;
      }
    }

    /// <summary>Field number for the "iceDefense" field.</summary>
    public const int IceDefenseFieldNumber = 49;
    private long iceDefense_;
    /// <summary>
    /// 冰抗
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long IceDefense {
      get { return iceDefense_; }
      set {
        iceDefense_ = value;
      }
    }

    /// <summary>Field number for the "fireDefense" field.</summary>
    public const int FireDefenseFieldNumber = 50;
    private long fireDefense_;
    /// <summary>
    /// 火抗
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long FireDefense {
      get { return fireDefense_; }
      set {
        fireDefense_ = value;
      }
    }

    /// <summary>Field number for the "rayDefense" field.</summary>
    public const int RayDefenseFieldNumber = 51;
    private long rayDefense_;
    /// <summary>
    /// 雷抗
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long RayDefense {
      get { return rayDefense_; }
      set {
        rayDefense_ = value;
      }
    }

    /// <summary>Field number for the "windDefense" field.</summary>
    public const int WindDefenseFieldNumber = 52;
    private long windDefense_;
    /// <summary>
    /// 风抗
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long WindDefense {
      get { return windDefense_; }
      set {
        windDefense_ = value;
      }
    }

    /// <summary>Field number for the "darkDefense" field.</summary>
    public const int DarkDefenseFieldNumber = 53;
    private long darkDefense_;
    /// <summary>
    /// 暗抗
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long DarkDefense {
      get { return darkDefense_; }
      set {
        darkDefense_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CharacterProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CharacterProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CharacterId != other.CharacterId) return false;
      if (PlayerId != other.PlayerId) return false;
      if (MapId != other.MapId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Orientation, other.Orientation)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MapPostX, other.MapPostX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MapPostY, other.MapPostY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MapPostZ, other.MapPostZ)) return false;
      if (CharacterField != other.CharacterField) return false;
      if (CharacterName != other.CharacterName) return false;
      if (CharacterOccupation != other.CharacterOccupation) return false;
      if (CharacterLevel != other.CharacterLevel) return false;
      if (CharacterExp != other.CharacterExp) return false;
      if (CharacterExpNext != other.CharacterExpNext) return false;
      if (CharacterTitleId != other.CharacterTitleId) return false;
      if (CharacterTitle != other.CharacterTitle) return false;
      if (CharacterRace != other.CharacterRace) return false;
      if (GuildId != other.GuildId) return false;
      if (GuildName != other.GuildName) return false;
      if (Coin != other.Coin) return false;
      if (MagicStone != other.MagicStone) return false;
      if (Strength != other.Strength) return false;
      if (Agility != other.Agility) return false;
      if (Endurance != other.Endurance) return false;
      if (Flexible != other.Flexible) return false;
      if (Wisdom != other.Wisdom) return false;
      if (Constitution != other.Constitution) return false;
      if (Charm != other.Charm) return false;
      if (Luck != other.Luck) return false;
      if (HitPoint != other.HitPoint) return false;
      if (HitPointMax != other.HitPointMax) return false;
      if (HpRecovery != other.HpRecovery) return false;
      if (MagicPoint != other.MagicPoint) return false;
      if (MagicPointMax != other.MagicPointMax) return false;
      if (MagicRecovery != other.MagicRecovery) return false;
      if (Attack != other.Attack) return false;
      if (AttackSpeed != other.AttackSpeed) return false;
      if (AttackSuccessRate != other.AttackSuccessRate) return false;
      if (MagicAttack != other.MagicAttack) return false;
      if (MagicAttackSpeed != other.MagicAttackSpeed) return false;
      if (MagicAttackSuccessRate != other.MagicAttackSuccessRate) return false;
      if (CriticalStrike != other.CriticalStrike) return false;
      if (MagicCriticalStrike != other.MagicCriticalStrike) return false;
      if (Accuracy != other.Accuracy) return false;
      if (MagicAccuracy != other.MagicAccuracy) return false;
      if (Dodge != other.Dodge) return false;
      if (MagicDodge != other.MagicDodge) return false;
      if (Defense != other.Defense) return false;
      if (LightDefense != other.LightDefense) return false;
      if (IceDefense != other.IceDefense) return false;
      if (FireDefense != other.FireDefense) return false;
      if (RayDefense != other.RayDefense) return false;
      if (WindDefense != other.WindDefense) return false;
      if (DarkDefense != other.DarkDefense) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (CharacterId.Length != 0) hash ^= CharacterId.GetHashCode();
      if (PlayerId.Length != 0) hash ^= PlayerId.GetHashCode();
      if (MapId != 0L) hash ^= MapId.GetHashCode();
      if (Orientation != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Orientation);
      if (MapPostX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MapPostX);
      if (MapPostY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MapPostY);
      if (MapPostZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MapPostZ);
      if (CharacterField != 0L) hash ^= CharacterField.GetHashCode();
      if (CharacterName.Length != 0) hash ^= CharacterName.GetHashCode();
      if (CharacterOccupation.Length != 0) hash ^= CharacterOccupation.GetHashCode();
      if (CharacterLevel != 0L) hash ^= CharacterLevel.GetHashCode();
      if (CharacterExp != 0L) hash ^= CharacterExp.GetHashCode();
      if (CharacterExpNext != 0L) hash ^= CharacterExpNext.GetHashCode();
      if (CharacterTitleId.Length != 0) hash ^= CharacterTitleId.GetHashCode();
      if (CharacterTitle.Length != 0) hash ^= CharacterTitle.GetHashCode();
      if (CharacterRace.Length != 0) hash ^= CharacterRace.GetHashCode();
      if (GuildId.Length != 0) hash ^= GuildId.GetHashCode();
      if (GuildName.Length != 0) hash ^= GuildName.GetHashCode();
      if (Coin != 0L) hash ^= Coin.GetHashCode();
      if (MagicStone != 0L) hash ^= MagicStone.GetHashCode();
      if (Strength != 0L) hash ^= Strength.GetHashCode();
      if (Agility != 0L) hash ^= Agility.GetHashCode();
      if (Endurance != 0L) hash ^= Endurance.GetHashCode();
      if (Flexible != 0L) hash ^= Flexible.GetHashCode();
      if (Wisdom != 0L) hash ^= Wisdom.GetHashCode();
      if (Constitution != 0L) hash ^= Constitution.GetHashCode();
      if (Charm != 0L) hash ^= Charm.GetHashCode();
      if (Luck != 0L) hash ^= Luck.GetHashCode();
      if (HitPoint != 0L) hash ^= HitPoint.GetHashCode();
      if (HitPointMax != 0L) hash ^= HitPointMax.GetHashCode();
      if (HpRecovery != 0L) hash ^= HpRecovery.GetHashCode();
      if (MagicPoint != 0L) hash ^= MagicPoint.GetHashCode();
      if (MagicPointMax != 0L) hash ^= MagicPointMax.GetHashCode();
      if (MagicRecovery != 0L) hash ^= MagicRecovery.GetHashCode();
      if (Attack != 0L) hash ^= Attack.GetHashCode();
      if (AttackSpeed != 0L) hash ^= AttackSpeed.GetHashCode();
      if (AttackSuccessRate != 0L) hash ^= AttackSuccessRate.GetHashCode();
      if (MagicAttack != 0L) hash ^= MagicAttack.GetHashCode();
      if (MagicAttackSpeed != 0L) hash ^= MagicAttackSpeed.GetHashCode();
      if (MagicAttackSuccessRate != 0L) hash ^= MagicAttackSuccessRate.GetHashCode();
      if (CriticalStrike != 0L) hash ^= CriticalStrike.GetHashCode();
      if (MagicCriticalStrike != 0L) hash ^= MagicCriticalStrike.GetHashCode();
      if (Accuracy != 0L) hash ^= Accuracy.GetHashCode();
      if (MagicAccuracy != 0L) hash ^= MagicAccuracy.GetHashCode();
      if (Dodge != 0L) hash ^= Dodge.GetHashCode();
      if (MagicDodge != 0L) hash ^= MagicDodge.GetHashCode();
      if (Defense != 0L) hash ^= Defense.GetHashCode();
      if (LightDefense != 0L) hash ^= LightDefense.GetHashCode();
      if (IceDefense != 0L) hash ^= IceDefense.GetHashCode();
      if (FireDefense != 0L) hash ^= FireDefense.GetHashCode();
      if (RayDefense != 0L) hash ^= RayDefense.GetHashCode();
      if (WindDefense != 0L) hash ^= WindDefense.GetHashCode();
      if (DarkDefense != 0L) hash ^= DarkDefense.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (CharacterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CharacterId);
      }
      if (PlayerId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PlayerId);
      }
      if (MapId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(MapId);
      }
      if (Orientation != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Orientation);
      }
      if (MapPostX != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(MapPostX);
      }
      if (MapPostY != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(MapPostY);
      }
      if (MapPostZ != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(MapPostZ);
      }
      if (CharacterField != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(CharacterField);
      }
      if (CharacterName.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(CharacterName);
      }
      if (CharacterOccupation.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(CharacterOccupation);
      }
      if (CharacterLevel != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(CharacterLevel);
      }
      if (CharacterExp != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(CharacterExp);
      }
      if (CharacterExpNext != 0L) {
        output.WriteRawTag(104);
        output.WriteInt64(CharacterExpNext);
      }
      if (CharacterTitleId.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(CharacterTitleId);
      }
      if (CharacterTitle.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(CharacterTitle);
      }
      if (CharacterRace.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(CharacterRace);
      }
      if (GuildId.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(GuildId);
      }
      if (GuildName.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(GuildName);
      }
      if (Coin != 0L) {
        output.WriteRawTag(152, 1);
        output.WriteInt64(Coin);
      }
      if (MagicStone != 0L) {
        output.WriteRawTag(160, 1);
        output.WriteInt64(MagicStone);
      }
      if (Strength != 0L) {
        output.WriteRawTag(168, 1);
        output.WriteInt64(Strength);
      }
      if (Agility != 0L) {
        output.WriteRawTag(176, 1);
        output.WriteInt64(Agility);
      }
      if (Endurance != 0L) {
        output.WriteRawTag(184, 1);
        output.WriteInt64(Endurance);
      }
      if (Flexible != 0L) {
        output.WriteRawTag(192, 1);
        output.WriteInt64(Flexible);
      }
      if (Wisdom != 0L) {
        output.WriteRawTag(200, 1);
        output.WriteInt64(Wisdom);
      }
      if (Constitution != 0L) {
        output.WriteRawTag(208, 1);
        output.WriteInt64(Constitution);
      }
      if (Charm != 0L) {
        output.WriteRawTag(216, 1);
        output.WriteInt64(Charm);
      }
      if (Luck != 0L) {
        output.WriteRawTag(224, 1);
        output.WriteInt64(Luck);
      }
      if (HitPoint != 0L) {
        output.WriteRawTag(232, 1);
        output.WriteInt64(HitPoint);
      }
      if (HitPointMax != 0L) {
        output.WriteRawTag(240, 1);
        output.WriteInt64(HitPointMax);
      }
      if (HpRecovery != 0L) {
        output.WriteRawTag(248, 1);
        output.WriteInt64(HpRecovery);
      }
      if (MagicPoint != 0L) {
        output.WriteRawTag(128, 2);
        output.WriteInt64(MagicPoint);
      }
      if (MagicPointMax != 0L) {
        output.WriteRawTag(136, 2);
        output.WriteInt64(MagicPointMax);
      }
      if (MagicRecovery != 0L) {
        output.WriteRawTag(144, 2);
        output.WriteInt64(MagicRecovery);
      }
      if (Attack != 0L) {
        output.WriteRawTag(152, 2);
        output.WriteInt64(Attack);
      }
      if (AttackSpeed != 0L) {
        output.WriteRawTag(160, 2);
        output.WriteInt64(AttackSpeed);
      }
      if (AttackSuccessRate != 0L) {
        output.WriteRawTag(168, 2);
        output.WriteInt64(AttackSuccessRate);
      }
      if (MagicAttack != 0L) {
        output.WriteRawTag(176, 2);
        output.WriteInt64(MagicAttack);
      }
      if (MagicAttackSpeed != 0L) {
        output.WriteRawTag(184, 2);
        output.WriteInt64(MagicAttackSpeed);
      }
      if (MagicAttackSuccessRate != 0L) {
        output.WriteRawTag(192, 2);
        output.WriteInt64(MagicAttackSuccessRate);
      }
      if (CriticalStrike != 0L) {
        output.WriteRawTag(200, 2);
        output.WriteInt64(CriticalStrike);
      }
      if (MagicCriticalStrike != 0L) {
        output.WriteRawTag(208, 2);
        output.WriteInt64(MagicCriticalStrike);
      }
      if (Accuracy != 0L) {
        output.WriteRawTag(216, 2);
        output.WriteInt64(Accuracy);
      }
      if (MagicAccuracy != 0L) {
        output.WriteRawTag(224, 2);
        output.WriteInt64(MagicAccuracy);
      }
      if (Dodge != 0L) {
        output.WriteRawTag(232, 2);
        output.WriteInt64(Dodge);
      }
      if (MagicDodge != 0L) {
        output.WriteRawTag(240, 2);
        output.WriteInt64(MagicDodge);
      }
      if (Defense != 0L) {
        output.WriteRawTag(248, 2);
        output.WriteInt64(Defense);
      }
      if (LightDefense != 0L) {
        output.WriteRawTag(128, 3);
        output.WriteInt64(LightDefense);
      }
      if (IceDefense != 0L) {
        output.WriteRawTag(136, 3);
        output.WriteInt64(IceDefense);
      }
      if (FireDefense != 0L) {
        output.WriteRawTag(144, 3);
        output.WriteInt64(FireDefense);
      }
      if (RayDefense != 0L) {
        output.WriteRawTag(152, 3);
        output.WriteInt64(RayDefense);
      }
      if (WindDefense != 0L) {
        output.WriteRawTag(160, 3);
        output.WriteInt64(WindDefense);
      }
      if (DarkDefense != 0L) {
        output.WriteRawTag(168, 3);
        output.WriteInt64(DarkDefense);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (CharacterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CharacterId);
      }
      if (PlayerId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PlayerId);
      }
      if (MapId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(MapId);
      }
      if (Orientation != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Orientation);
      }
      if (MapPostX != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(MapPostX);
      }
      if (MapPostY != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(MapPostY);
      }
      if (MapPostZ != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(MapPostZ);
      }
      if (CharacterField != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(CharacterField);
      }
      if (CharacterName.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(CharacterName);
      }
      if (CharacterOccupation.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(CharacterOccupation);
      }
      if (CharacterLevel != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(CharacterLevel);
      }
      if (CharacterExp != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(CharacterExp);
      }
      if (CharacterExpNext != 0L) {
        output.WriteRawTag(104);
        output.WriteInt64(CharacterExpNext);
      }
      if (CharacterTitleId.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(CharacterTitleId);
      }
      if (CharacterTitle.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(CharacterTitle);
      }
      if (CharacterRace.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(CharacterRace);
      }
      if (GuildId.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(GuildId);
      }
      if (GuildName.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(GuildName);
      }
      if (Coin != 0L) {
        output.WriteRawTag(152, 1);
        output.WriteInt64(Coin);
      }
      if (MagicStone != 0L) {
        output.WriteRawTag(160, 1);
        output.WriteInt64(MagicStone);
      }
      if (Strength != 0L) {
        output.WriteRawTag(168, 1);
        output.WriteInt64(Strength);
      }
      if (Agility != 0L) {
        output.WriteRawTag(176, 1);
        output.WriteInt64(Agility);
      }
      if (Endurance != 0L) {
        output.WriteRawTag(184, 1);
        output.WriteInt64(Endurance);
      }
      if (Flexible != 0L) {
        output.WriteRawTag(192, 1);
        output.WriteInt64(Flexible);
      }
      if (Wisdom != 0L) {
        output.WriteRawTag(200, 1);
        output.WriteInt64(Wisdom);
      }
      if (Constitution != 0L) {
        output.WriteRawTag(208, 1);
        output.WriteInt64(Constitution);
      }
      if (Charm != 0L) {
        output.WriteRawTag(216, 1);
        output.WriteInt64(Charm);
      }
      if (Luck != 0L) {
        output.WriteRawTag(224, 1);
        output.WriteInt64(Luck);
      }
      if (HitPoint != 0L) {
        output.WriteRawTag(232, 1);
        output.WriteInt64(HitPoint);
      }
      if (HitPointMax != 0L) {
        output.WriteRawTag(240, 1);
        output.WriteInt64(HitPointMax);
      }
      if (HpRecovery != 0L) {
        output.WriteRawTag(248, 1);
        output.WriteInt64(HpRecovery);
      }
      if (MagicPoint != 0L) {
        output.WriteRawTag(128, 2);
        output.WriteInt64(MagicPoint);
      }
      if (MagicPointMax != 0L) {
        output.WriteRawTag(136, 2);
        output.WriteInt64(MagicPointMax);
      }
      if (MagicRecovery != 0L) {
        output.WriteRawTag(144, 2);
        output.WriteInt64(MagicRecovery);
      }
      if (Attack != 0L) {
        output.WriteRawTag(152, 2);
        output.WriteInt64(Attack);
      }
      if (AttackSpeed != 0L) {
        output.WriteRawTag(160, 2);
        output.WriteInt64(AttackSpeed);
      }
      if (AttackSuccessRate != 0L) {
        output.WriteRawTag(168, 2);
        output.WriteInt64(AttackSuccessRate);
      }
      if (MagicAttack != 0L) {
        output.WriteRawTag(176, 2);
        output.WriteInt64(MagicAttack);
      }
      if (MagicAttackSpeed != 0L) {
        output.WriteRawTag(184, 2);
        output.WriteInt64(MagicAttackSpeed);
      }
      if (MagicAttackSuccessRate != 0L) {
        output.WriteRawTag(192, 2);
        output.WriteInt64(MagicAttackSuccessRate);
      }
      if (CriticalStrike != 0L) {
        output.WriteRawTag(200, 2);
        output.WriteInt64(CriticalStrike);
      }
      if (MagicCriticalStrike != 0L) {
        output.WriteRawTag(208, 2);
        output.WriteInt64(MagicCriticalStrike);
      }
      if (Accuracy != 0L) {
        output.WriteRawTag(216, 2);
        output.WriteInt64(Accuracy);
      }
      if (MagicAccuracy != 0L) {
        output.WriteRawTag(224, 2);
        output.WriteInt64(MagicAccuracy);
      }
      if (Dodge != 0L) {
        output.WriteRawTag(232, 2);
        output.WriteInt64(Dodge);
      }
      if (MagicDodge != 0L) {
        output.WriteRawTag(240, 2);
        output.WriteInt64(MagicDodge);
      }
      if (Defense != 0L) {
        output.WriteRawTag(248, 2);
        output.WriteInt64(Defense);
      }
      if (LightDefense != 0L) {
        output.WriteRawTag(128, 3);
        output.WriteInt64(LightDefense);
      }
      if (IceDefense != 0L) {
        output.WriteRawTag(136, 3);
        output.WriteInt64(IceDefense);
      }
      if (FireDefense != 0L) {
        output.WriteRawTag(144, 3);
        output.WriteInt64(FireDefense);
      }
      if (RayDefense != 0L) {
        output.WriteRawTag(152, 3);
        output.WriteInt64(RayDefense);
      }
      if (WindDefense != 0L) {
        output.WriteRawTag(160, 3);
        output.WriteInt64(WindDefense);
      }
      if (DarkDefense != 0L) {
        output.WriteRawTag(168, 3);
        output.WriteInt64(DarkDefense);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (CharacterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CharacterId);
      }
      if (PlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerId);
      }
      if (MapId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MapId);
      }
      if (Orientation != 0F) {
        size += 1 + 4;
      }
      if (MapPostX != 0F) {
        size += 1 + 4;
      }
      if (MapPostY != 0F) {
        size += 1 + 4;
      }
      if (MapPostZ != 0F) {
        size += 1 + 4;
      }
      if (CharacterField != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CharacterField);
      }
      if (CharacterName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CharacterName);
      }
      if (CharacterOccupation.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CharacterOccupation);
      }
      if (CharacterLevel != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CharacterLevel);
      }
      if (CharacterExp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CharacterExp);
      }
      if (CharacterExpNext != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CharacterExpNext);
      }
      if (CharacterTitleId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CharacterTitleId);
      }
      if (CharacterTitle.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CharacterTitle);
      }
      if (CharacterRace.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CharacterRace);
      }
      if (GuildId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(GuildId);
      }
      if (GuildName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(GuildName);
      }
      if (Coin != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Coin);
      }
      if (MagicStone != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(MagicStone);
      }
      if (Strength != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Strength);
      }
      if (Agility != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Agility);
      }
      if (Endurance != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Endurance);
      }
      if (Flexible != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Flexible);
      }
      if (Wisdom != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Wisdom);
      }
      if (Constitution != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Constitution);
      }
      if (Charm != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Charm);
      }
      if (Luck != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Luck);
      }
      if (HitPoint != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(HitPoint);
      }
      if (HitPointMax != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(HitPointMax);
      }
      if (HpRecovery != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(HpRecovery);
      }
      if (MagicPoint != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(MagicPoint);
      }
      if (MagicPointMax != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(MagicPointMax);
      }
      if (MagicRecovery != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(MagicRecovery);
      }
      if (Attack != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Attack);
      }
      if (AttackSpeed != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(AttackSpeed);
      }
      if (AttackSuccessRate != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(AttackSuccessRate);
      }
      if (MagicAttack != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(MagicAttack);
      }
      if (MagicAttackSpeed != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(MagicAttackSpeed);
      }
      if (MagicAttackSuccessRate != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(MagicAttackSuccessRate);
      }
      if (CriticalStrike != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(CriticalStrike);
      }
      if (MagicCriticalStrike != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(MagicCriticalStrike);
      }
      if (Accuracy != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Accuracy);
      }
      if (MagicAccuracy != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(MagicAccuracy);
      }
      if (Dodge != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Dodge);
      }
      if (MagicDodge != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(MagicDodge);
      }
      if (Defense != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Defense);
      }
      if (LightDefense != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(LightDefense);
      }
      if (IceDefense != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(IceDefense);
      }
      if (FireDefense != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(FireDefense);
      }
      if (RayDefense != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(RayDefense);
      }
      if (WindDefense != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(WindDefense);
      }
      if (DarkDefense != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(DarkDefense);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CharacterProto other) {
      if (other == null) {
        return;
      }
      if (other.CharacterId.Length != 0) {
        CharacterId = other.CharacterId;
      }
      if (other.PlayerId.Length != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.MapId != 0L) {
        MapId = other.MapId;
      }
      if (other.Orientation != 0F) {
        Orientation = other.Orientation;
      }
      if (other.MapPostX != 0F) {
        MapPostX = other.MapPostX;
      }
      if (other.MapPostY != 0F) {
        MapPostY = other.MapPostY;
      }
      if (other.MapPostZ != 0F) {
        MapPostZ = other.MapPostZ;
      }
      if (other.CharacterField != 0L) {
        CharacterField = other.CharacterField;
      }
      if (other.CharacterName.Length != 0) {
        CharacterName = other.CharacterName;
      }
      if (other.CharacterOccupation.Length != 0) {
        CharacterOccupation = other.CharacterOccupation;
      }
      if (other.CharacterLevel != 0L) {
        CharacterLevel = other.CharacterLevel;
      }
      if (other.CharacterExp != 0L) {
        CharacterExp = other.CharacterExp;
      }
      if (other.CharacterExpNext != 0L) {
        CharacterExpNext = other.CharacterExpNext;
      }
      if (other.CharacterTitleId.Length != 0) {
        CharacterTitleId = other.CharacterTitleId;
      }
      if (other.CharacterTitle.Length != 0) {
        CharacterTitle = other.CharacterTitle;
      }
      if (other.CharacterRace.Length != 0) {
        CharacterRace = other.CharacterRace;
      }
      if (other.GuildId.Length != 0) {
        GuildId = other.GuildId;
      }
      if (other.GuildName.Length != 0) {
        GuildName = other.GuildName;
      }
      if (other.Coin != 0L) {
        Coin = other.Coin;
      }
      if (other.MagicStone != 0L) {
        MagicStone = other.MagicStone;
      }
      if (other.Strength != 0L) {
        Strength = other.Strength;
      }
      if (other.Agility != 0L) {
        Agility = other.Agility;
      }
      if (other.Endurance != 0L) {
        Endurance = other.Endurance;
      }
      if (other.Flexible != 0L) {
        Flexible = other.Flexible;
      }
      if (other.Wisdom != 0L) {
        Wisdom = other.Wisdom;
      }
      if (other.Constitution != 0L) {
        Constitution = other.Constitution;
      }
      if (other.Charm != 0L) {
        Charm = other.Charm;
      }
      if (other.Luck != 0L) {
        Luck = other.Luck;
      }
      if (other.HitPoint != 0L) {
        HitPoint = other.HitPoint;
      }
      if (other.HitPointMax != 0L) {
        HitPointMax = other.HitPointMax;
      }
      if (other.HpRecovery != 0L) {
        HpRecovery = other.HpRecovery;
      }
      if (other.MagicPoint != 0L) {
        MagicPoint = other.MagicPoint;
      }
      if (other.MagicPointMax != 0L) {
        MagicPointMax = other.MagicPointMax;
      }
      if (other.MagicRecovery != 0L) {
        MagicRecovery = other.MagicRecovery;
      }
      if (other.Attack != 0L) {
        Attack = other.Attack;
      }
      if (other.AttackSpeed != 0L) {
        AttackSpeed = other.AttackSpeed;
      }
      if (other.AttackSuccessRate != 0L) {
        AttackSuccessRate = other.AttackSuccessRate;
      }
      if (other.MagicAttack != 0L) {
        MagicAttack = other.MagicAttack;
      }
      if (other.MagicAttackSpeed != 0L) {
        MagicAttackSpeed = other.MagicAttackSpeed;
      }
      if (other.MagicAttackSuccessRate != 0L) {
        MagicAttackSuccessRate = other.MagicAttackSuccessRate;
      }
      if (other.CriticalStrike != 0L) {
        CriticalStrike = other.CriticalStrike;
      }
      if (other.MagicCriticalStrike != 0L) {
        MagicCriticalStrike = other.MagicCriticalStrike;
      }
      if (other.Accuracy != 0L) {
        Accuracy = other.Accuracy;
      }
      if (other.MagicAccuracy != 0L) {
        MagicAccuracy = other.MagicAccuracy;
      }
      if (other.Dodge != 0L) {
        Dodge = other.Dodge;
      }
      if (other.MagicDodge != 0L) {
        MagicDodge = other.MagicDodge;
      }
      if (other.Defense != 0L) {
        Defense = other.Defense;
      }
      if (other.LightDefense != 0L) {
        LightDefense = other.LightDefense;
      }
      if (other.IceDefense != 0L) {
        IceDefense = other.IceDefense;
      }
      if (other.FireDefense != 0L) {
        FireDefense = other.FireDefense;
      }
      if (other.RayDefense != 0L) {
        RayDefense = other.RayDefense;
      }
      if (other.WindDefense != 0L) {
        WindDefense = other.WindDefense;
      }
      if (other.DarkDefense != 0L) {
        DarkDefense = other.DarkDefense;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            CharacterId = input.ReadString();
            break;
          }
          case 18: {
            PlayerId = input.ReadString();
            break;
          }
          case 24: {
            MapId = input.ReadInt64();
            break;
          }
          case 37: {
            Orientation = input.ReadFloat();
            break;
          }
          case 45: {
            MapPostX = input.ReadFloat();
            break;
          }
          case 53: {
            MapPostY = input.ReadFloat();
            break;
          }
          case 61: {
            MapPostZ = input.ReadFloat();
            break;
          }
          case 64: {
            CharacterField = input.ReadInt64();
            break;
          }
          case 74: {
            CharacterName = input.ReadString();
            break;
          }
          case 82: {
            CharacterOccupation = input.ReadString();
            break;
          }
          case 88: {
            CharacterLevel = input.ReadInt64();
            break;
          }
          case 96: {
            CharacterExp = input.ReadInt64();
            break;
          }
          case 104: {
            CharacterExpNext = input.ReadInt64();
            break;
          }
          case 114: {
            CharacterTitleId = input.ReadString();
            break;
          }
          case 122: {
            CharacterTitle = input.ReadString();
            break;
          }
          case 130: {
            CharacterRace = input.ReadString();
            break;
          }
          case 138: {
            GuildId = input.ReadString();
            break;
          }
          case 146: {
            GuildName = input.ReadString();
            break;
          }
          case 152: {
            Coin = input.ReadInt64();
            break;
          }
          case 160: {
            MagicStone = input.ReadInt64();
            break;
          }
          case 168: {
            Strength = input.ReadInt64();
            break;
          }
          case 176: {
            Agility = input.ReadInt64();
            break;
          }
          case 184: {
            Endurance = input.ReadInt64();
            break;
          }
          case 192: {
            Flexible = input.ReadInt64();
            break;
          }
          case 200: {
            Wisdom = input.ReadInt64();
            break;
          }
          case 208: {
            Constitution = input.ReadInt64();
            break;
          }
          case 216: {
            Charm = input.ReadInt64();
            break;
          }
          case 224: {
            Luck = input.ReadInt64();
            break;
          }
          case 232: {
            HitPoint = input.ReadInt64();
            break;
          }
          case 240: {
            HitPointMax = input.ReadInt64();
            break;
          }
          case 248: {
            HpRecovery = input.ReadInt64();
            break;
          }
          case 256: {
            MagicPoint = input.ReadInt64();
            break;
          }
          case 264: {
            MagicPointMax = input.ReadInt64();
            break;
          }
          case 272: {
            MagicRecovery = input.ReadInt64();
            break;
          }
          case 280: {
            Attack = input.ReadInt64();
            break;
          }
          case 288: {
            AttackSpeed = input.ReadInt64();
            break;
          }
          case 296: {
            AttackSuccessRate = input.ReadInt64();
            break;
          }
          case 304: {
            MagicAttack = input.ReadInt64();
            break;
          }
          case 312: {
            MagicAttackSpeed = input.ReadInt64();
            break;
          }
          case 320: {
            MagicAttackSuccessRate = input.ReadInt64();
            break;
          }
          case 328: {
            CriticalStrike = input.ReadInt64();
            break;
          }
          case 336: {
            MagicCriticalStrike = input.ReadInt64();
            break;
          }
          case 344: {
            Accuracy = input.ReadInt64();
            break;
          }
          case 352: {
            MagicAccuracy = input.ReadInt64();
            break;
          }
          case 360: {
            Dodge = input.ReadInt64();
            break;
          }
          case 368: {
            MagicDodge = input.ReadInt64();
            break;
          }
          case 376: {
            Defense = input.ReadInt64();
            break;
          }
          case 384: {
            LightDefense = input.ReadInt64();
            break;
          }
          case 392: {
            IceDefense = input.ReadInt64();
            break;
          }
          case 400: {
            FireDefense = input.ReadInt64();
            break;
          }
          case 408: {
            RayDefense = input.ReadInt64();
            break;
          }
          case 416: {
            WindDefense = input.ReadInt64();
            break;
          }
          case 424: {
            DarkDefense = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            CharacterId = input.ReadString();
            break;
          }
          case 18: {
            PlayerId = input.ReadString();
            break;
          }
          case 24: {
            MapId = input.ReadInt64();
            break;
          }
          case 37: {
            Orientation = input.ReadFloat();
            break;
          }
          case 45: {
            MapPostX = input.ReadFloat();
            break;
          }
          case 53: {
            MapPostY = input.ReadFloat();
            break;
          }
          case 61: {
            MapPostZ = input.ReadFloat();
            break;
          }
          case 64: {
            CharacterField = input.ReadInt64();
            break;
          }
          case 74: {
            CharacterName = input.ReadString();
            break;
          }
          case 82: {
            CharacterOccupation = input.ReadString();
            break;
          }
          case 88: {
            CharacterLevel = input.ReadInt64();
            break;
          }
          case 96: {
            CharacterExp = input.ReadInt64();
            break;
          }
          case 104: {
            CharacterExpNext = input.ReadInt64();
            break;
          }
          case 114: {
            CharacterTitleId = input.ReadString();
            break;
          }
          case 122: {
            CharacterTitle = input.ReadString();
            break;
          }
          case 130: {
            CharacterRace = input.ReadString();
            break;
          }
          case 138: {
            GuildId = input.ReadString();
            break;
          }
          case 146: {
            GuildName = input.ReadString();
            break;
          }
          case 152: {
            Coin = input.ReadInt64();
            break;
          }
          case 160: {
            MagicStone = input.ReadInt64();
            break;
          }
          case 168: {
            Strength = input.ReadInt64();
            break;
          }
          case 176: {
            Agility = input.ReadInt64();
            break;
          }
          case 184: {
            Endurance = input.ReadInt64();
            break;
          }
          case 192: {
            Flexible = input.ReadInt64();
            break;
          }
          case 200: {
            Wisdom = input.ReadInt64();
            break;
          }
          case 208: {
            Constitution = input.ReadInt64();
            break;
          }
          case 216: {
            Charm = input.ReadInt64();
            break;
          }
          case 224: {
            Luck = input.ReadInt64();
            break;
          }
          case 232: {
            HitPoint = input.ReadInt64();
            break;
          }
          case 240: {
            HitPointMax = input.ReadInt64();
            break;
          }
          case 248: {
            HpRecovery = input.ReadInt64();
            break;
          }
          case 256: {
            MagicPoint = input.ReadInt64();
            break;
          }
          case 264: {
            MagicPointMax = input.ReadInt64();
            break;
          }
          case 272: {
            MagicRecovery = input.ReadInt64();
            break;
          }
          case 280: {
            Attack = input.ReadInt64();
            break;
          }
          case 288: {
            AttackSpeed = input.ReadInt64();
            break;
          }
          case 296: {
            AttackSuccessRate = input.ReadInt64();
            break;
          }
          case 304: {
            MagicAttack = input.ReadInt64();
            break;
          }
          case 312: {
            MagicAttackSpeed = input.ReadInt64();
            break;
          }
          case 320: {
            MagicAttackSuccessRate = input.ReadInt64();
            break;
          }
          case 328: {
            CriticalStrike = input.ReadInt64();
            break;
          }
          case 336: {
            MagicCriticalStrike = input.ReadInt64();
            break;
          }
          case 344: {
            Accuracy = input.ReadInt64();
            break;
          }
          case 352: {
            MagicAccuracy = input.ReadInt64();
            break;
          }
          case 360: {
            Dodge = input.ReadInt64();
            break;
          }
          case 368: {
            MagicDodge = input.ReadInt64();
            break;
          }
          case 376: {
            Defense = input.ReadInt64();
            break;
          }
          case 384: {
            LightDefense = input.ReadInt64();
            break;
          }
          case 392: {
            IceDefense = input.ReadInt64();
            break;
          }
          case 400: {
            FireDefense = input.ReadInt64();
            break;
          }
          case 408: {
            RayDefense = input.ReadInt64();
            break;
          }
          case 416: {
            WindDefense = input.ReadInt64();
            break;
          }
          case 424: {
            DarkDefense = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
